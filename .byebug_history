exit
des
start
exit
des
start
exit
des.first.iata_code
des.first
des
start
exit
des
exit
des
start
c
Airport.where(city: city_name).count - 1
city_name
exit
count = Airport.where(city: city_name).count - 1
count = Airport.where(city: city_name).count
count = Airport.where(city: city_name) - 1
city_name
c
count = Airport.where(city: city_name)
city_name
exit
get_code_for_not_available_first_hand(city_name)
Airport.find_by_city(city_name).iata_code == 'N/A' && Airport.where(city: city_name).count > 1
Airport.find_by_city(city_name).present?
city_name
start
c
exit
count = Airport.where(city: city_name).count
count = Airport.where(city: city_name)
get_code_for_not_available_first_hand(city_name)
Airport.where(city: city_name).count > 1
Airport.find_by_city(city_name).iata_code == 'N/A'
Airport.find_by_city(city_name).present?
city_name
c
Airport.find_by_city(city_name).iata_code == 'N/A'
Airport.find_by_city(city_name).present?
exit
Airport.find_by_city(city_name).present?
Airport.find_by_city(city_name)
city_name
exit
start
exit
get_airport_code(obj.start.upcase)
start
exit
Airport.
obj.end.upcase
obj.end
get_airport_code(obj.end.upcase)
get_airport_code(obj.start.upcase)
obj.start
exit
row.to_hash
row
exit
row.to_hash
row
row.hash
row
row.to_hash
row
exit
csv_text
row
c
csv_text = File.read(Rails.root.join("lib", "global_airports.csv"))
exit
response["payload"]["trips"]["tripOption"].count
response["payload"]["trips"]["tripOption"]
response
exit
departure_time(0)
index
exit
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["leg"][0]["departureTime"].to_datetime.to_formatted_s(:long)
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["leg"][0]["departureTime"].datetime.to_formatted_s(:long)
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["leg"][0]["departureTime"]
index
response["payload"]["trips"]["tripOption"]
response["payload"]["trips"]["tripOption"].count
response["payload"]["trips"]["tripOption"]
response["payload"]["trips"]
response["payload"]
response
reponse["payload"]
response["payload"]["trips"]["tripOption"][index]["slice"][0]["segment"][0]["leg"][0]["arrivalTime"]
c
response
exit
response
c
d1 = date_into_correct_format(obj.date1) if obj.date1.present?
c
obj
exit
obj.date1
obj
continue
response = HTTP.get("https://maps.googleapis.com/maps/api/place/textsearch/json?query=city&key=api_key&type=airport")
api_key = airline_configuration_params["google_api_key"]
exit
HTTP.get("https://maps.googleapis.com/maps/api/place/textsearch/json?query=Dubai&key=api&type=airport")
HTTP.get("https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=api&location=#{lat},#{long}&radius=30000&types=airport")
response = HTTP.get("https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=api&location=#{lat},#{long}&radius=30000&types=airport")
long = Geocoder.coordinates(start)[1]
lat = Geocoder.coordinates(start)[0]
start
api = airline_configuration_params["google_api_key"]
exit
@client.spots(lat, long, types: 'airport', detail: true, radius: 10000)
@client.spots(lat, long, types: 'hospital', detail: true, radius: 10000)
@client.spots(lat, long, types: 'airport', detail: true)
@client.spots(lat, long, types: 'restaurant', detail: true)
@client.spots(lat, long, types: 'airport', detail: true)
@client.spots(lat, long, types: 'airport')
@client.spots(lat, long)
long
lat
@client.spots(lat, long, :types => 'airport')
long = Geocoder.coordinates('Dubai')[1]
lat = Geocoder.coordinates('Dubai')[0]
lat
@client = GooglePlaces::Client.new(airline_configuration_params["google_api_key"])
exit
@client = GooglePlaces::Client.new('AIzaSyAMXNJ-bCk0_vUmru_jggyoawl0Vo_1ZL0')
@client = GooglePlaces::Client.new(airline_configuration_params["google_api_key"])
long = Geocoder.coordinates('Dubai')[1]
long = Geocoder.coordinates('Dubai')[0]
lat
lat = Geocoder.coordinates('Dubai')[0]
Geocoder.coordinates('Dubai')[0]
Geocoder.coordinates('Dubai')
Geocoder.coordinates('Dubai)
Geocoder.coordinates(city)
Geocoder.coordinates(city)[0]
start
exit
id
exit
id
exit
id
exit
obj
count
c
exit
id
exit
id
saved_search_id
id
exit
id
date1
id
exit
id
c
Result.create!(departure_time: response["payload"]["trips"]["tripOption"][index]["slice"][0]["segment"][0]["leg"][0]["departureTime"], arrival_time: response["payload"]["trips"]["tripOption"][index]["slice"][0]["segment"][0]["leg"][0]["arrivalTime"], saved_search_id: id, flight_cost: response["payload"]["trips"]["tripOption"][index]["saleTotal"])
exit
response["payload"]["trips"]["tripOption"][index]["slice"][0]["segment"][0]["leg"][0]["arrivalTime"]
get_departure_time(index)
index
total_flight_options
c
get_flight_fare(0)
exit
response["payload"]["trips"]["tripOption"][index]["saleTotal"]
get_flight_fare(0)
exit
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["duration"]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"]
exit
response["payload"]["status_code"] == "API_ERROR"
response["payload"]["status_code"]
response["payload"]
response["code"]
response
exit
response["payload"]["trips"]["tripOption"].count
response["payload"]["trips"]["tripOption"]
response["payload"]["trips"]["tripOption"][0]["saleTotal"]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["leg"][0]["departureTime"]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["leg"][0]["arrivalTime"]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["leg"][0]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["leg"]["0"]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]["leg"]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"][0]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment"]
response["payload"]["trips"]["tripOption"][0]["slice"][0]["segment']
response["payload"]["trips"]["tripOption"][0]["slice"][0][0]
response["payload"]["trips"]["tripOption"][0]["slice"][0]
response["payload"]["trips"]["tripOption"][0]["slice"]
response["payload"]["trips"]["tripOption"][0]["saleTotal"]
response["payload"]["trips"]["tripOption"][0]
response["payload"]["trips"]["tripOption"]["o"]
response["payload"]["trips"]["tripOption"]["kind"]
response["payload"]["trips"]["tripOption"]["saleTotal"]
response["payload"]["trips"]["tripOption"]
response["payload"]["trips"]["data"]
response["payload"]["trips"]["tripOptions"]
response["payload"]["trips"]
response["payload"]["trips]
response["payload"]
response
exit
response
exit
response
response["tripOption"]
response["data"]
response["kind"]
response["root"]
response["trips"]
response['trips']
response
exit
des
source
date_into_correct_format(date1)
date1
exit
obj
duration_in_minutes
exit
d2
d1
exit
response
exit
saved_search_date1
saved_search
exit
saved_search_date1
saved_search
c
saved_search_params
exit
saved_search_params
exit
@saved_searches
exit
response
exit
RapidAPI.config(project: "flight_system", token: "1df9ffe5-2bba-4015-af77-013715902f65")
